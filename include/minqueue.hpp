#ifndef MINQUEUE_H
#define MINQUEUE_H

#include <vector>

struct minimum {
  uint32_t elem;
  uint32_t* pos;
  minimum(uint32_t e, uint32_t* p) : elem(e), pos(p){};
};

class Minqueue {
 public:
  /**
   *	Given an element add it to the end of _curVec and if x_k <
   *_minimumVec.end() remove elements until x_k > _minimumVec.end() and push it
   * to _minimumVec.
   * @params x_k The element to be pushed generated by a linear congruent number
   * generator
   * @returns None
   */
  void enqueue(const uint32_t& x_k);

  /**
   *	Remove _curVec.begin() also in _minimumVec() if their values are the
   *same
   * @params None
   * @returns None
   */
  void dequeue();

  /**
   *	Returns _minimumVec().begin() that due to the invariant in enqueue is
   *always the smallest element
   * @params None
   * @returns the smallest integer in _minimumVec
   */
  minimum minElem();

  /**
   *	Returns the size of _minimumVec
   * @params None
   * @returns the size of _minimuVec
   */
  uint32_t sizeOfMinVec();

 private:
  std::vector<uint32_t>* _curVec;
  std::vector<minimum>* _minimumVec;
};

#endif  // MINQUE_H