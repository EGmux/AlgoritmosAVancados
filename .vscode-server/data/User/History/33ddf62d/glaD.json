// Place your key bindings in this file to override the defaultsauto[]
[
    {
        "key": "alt+a",
        "command": "workbench.action.terminal.scrollUpPage",
        "when": "terminalFocus && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocus && terminalProcessSupported && !terminalAltBufferActive"
    },
    {
        "key": "shift+pageup",
        "command": "-workbench.action.terminal.scrollUpPage",
        "when": "terminalFocus && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocus && terminalProcessSupported && !terminalAltBufferActive"
    },
    { "key": "ctrl+c ctrl+n", "command": "extension.coq.stepForward", "when": "editorTextFocus && editorLangId == 'coq'"},
{ "key": "ctrl+c ctrl+u", "command": "extension.coq.stepBackward", "when": "editorTextFocus && editorLangId == 'coq'" },
{ "key": "ctrl+c ctrl+enter", "command": "extension.coq.interpretToPoint", "when": "editorTextFocus && editorLangId == 'coq'" },
{ "key": "ctrl+c ctrl+b", "command": "extension.coq.interpretToEnd", "when": "editorTextFocus && editorLangId == 'coq'" },
{ "key": "ctrl+c ctrl+r", "command": "extension.coq.reset", "when": "editorTextFocus && editorLangId == 'coq'" },
{ "key": "ctrl+c ctrl+c", "command": "extension.coq.interrupt", "when": "editorTextFocus && editorLangId == 'coq'" },
{ "key": "ctrl+c ctrl+n", "command": "extension.coq.stepForward", "when": "resourceScheme==coq-view"},
{ "key": "ctrl+c ctrl+u", "command": "extension.coq.stepBackward", "when": "resourceScheme==coq-view" },
{ "key": "ctrl+c ctrl+enter", "command": "extension.coq.interpretToPoint", "when": "resourceScheme==coq-view" },
{
    "key": "ctrl+c ctrl+c",
    "command": "extension.coq.interrupt",
    "when": "resourceScheme==coq-view"
},
{
    "key": "ctrl+g ctrl+oem_period",
    "command": "magit.dispatch"
},
{
    "key": "alt+x ctrl+g",
    "command": "-magit.dispatch"
},
{
    "key": "ctrl+b ctrl+d",
    "command": "workbench.action.closeActiveEditor"
},
{
    "key": "ctrl+w",
    "command": "-workbench.action.closeActiveEditor"
},
{
    "key": "ctrl+w j",
    "command": "workbench.action.moveActiveEditorGroupDown"
},
{
    "key": "ctrl+k down",
    "command": "-workbench.action.moveActiveEditorGroupDown"
},
{
    "key": "ctrl+w h",
    "command": "workbench.action.moveActiveEditorGroupLeft"
},
{
    "key": "ctrl+k left",
    "command": "-workbench.action.moveActiveEditorGroupLeft"
},
{
    "key": "ctrl+w l",
    "command": "workbench.action.moveActiveEditorGroupRight"
},
{
    "key": "ctrl+k right",
    "command": "-workbench.action.moveActiveEditorGroupRight"
},
{
    "key": "ctrl+w k",
    "command": "workbench.action.moveActiveEditorGroupUp"
},
{
    "key": "ctrl+k up",
    "command": "-workbench.action.moveActiveEditorGroupUp"
},
{
    "key": "ctrl+w up",
    "command": "workbench.action.focusAboveGroup"
},
{
    "key": "ctrl+k ctrl+up",
    "command": "-workbench.action.focusAboveGroup"
},
{
    "key": "ctrl+w down",
    "command": "workbench.action.focusBelowGroup"
},
{
    "key": "ctrl+k ctrl+down",
    "command": "-workbench.action.focusBelowGroup"
},
{
    "key": "ctrl+w right",
    "command": "workbench.action.focusRightGroup"
},
{
    "key": "ctrl+k ctrl+right",
    "command": "-workbench.action.focusRightGroup"
},
{
    "key": "ctrl+w left",
    "command": "workbench.action.focusLeftGroup"
},
{
    "key": "ctrl+k ctrl+left",
    "command": "-workbench.action.focusLeftGroup"
},
{
    "key": "ctrl+p",
    "command": "workbench.action.quickOpenSelectPrevious",
    "when": "inQuickOpen"
},
{
    "key": "ctrl+p",
    "command": "-workbench.action.quickOpenSelectPrevious",
    "when": "inQuickOpen"
},
{
    "key": "ctrl+p",
    "command": "-emacs-mcx.previousLine",
    "when": "editorTextFocus && !suggestWidgetVisible"
},
{
    "key": "ctrl+p",
    "command": "-emacs-mcx.previousLine",
    "when": "terminalFocus"
},
{
    "key": "ctrl+shift+alt+backspace",
    "command": "emacs-mcx.paredit.killSexp",
    "when": "editorTextFocus && !config.emacs-mcx.useMetaPrefixMacCmd"
},
{
    "key": "ctrl+alt+k",
    "command": "-emacs-mcx.paredit.killSexp",
    "when": "editorTextFocus && !config.emacs-mcx.useMetaPrefixMacCmd"
},
{
    "key": "ctrl+alt+right",
    "command": "emacs-mcx.paredit.forwardSexp",
    "when": "editorTextFocus && !config.emacs-mcx.useMetaPrefixMacCmd"
},
{
    "key": "ctrl+alt+f",
    "command": "-emacs-mcx.paredit.forwardSexp",
    "when": "editorTextFocus && !config.emacs-mcx.useMetaPrefixMacCmd"
},
{
    "key": "ctrl+alt+left",
    "command": "emacs-mcx.paredit.backwardSexp",
    "when": "editorTextFocus && !config.emacs-mcx.useMetaPrefixMacCmd"
},
{
    "key": "ctrl+alt+b",
    "command": "-emacs-mcx.paredit.backwardSexp",
    "when": "editorTextFocus && !config.emacs-mcx.useMetaPrefixMacCmd"
},
{
    "key": "ctrl+o ctrl+o",
    "command": "emacs-mcx.paredit.markSexp",
    "when": "editorTextFocus && !config.emacs-mcx.useMetaPrefixMacCmd"
},
{
    "key": "ctrl+shift+alt+2",
    "command": "-emacs-mcx.paredit.markSexp",
    "when": "editorTextFocus && !config.emacs-mcx.useMetaPrefixMacCmd"
},
{
    "key": "ctrl+alt+backspace",
    "command": "emacs-mcx.paredit.backwardKillSexp",
    "when": "editorTextFocus && !config.emacs-mcx.useMetaPrefixMacCmd"
},
{
    "key": "ctrl+alt+backspace",
    "command": "-emacs-mcx.paredit.backwardKillSexp",
    "when": "editorTextFocus && !config.emacs-mcx.useMetaPrefixMacCmd"
},
{
    "key": "ctrl+alt+z",
    "command": "undo",
    "when": "notebookEditorFocused && !inputFocus && !notebookOutputFocused"
},
{
    "key": "z",
    "command": "-undo",
    "when": "notebookEditorFocused && !inputFocus && !notebookOutputFocused"
},
{
    "key": "ctrl+alt+z",
    "command": "undo"
},
{
    "key": "ctrl+alt+x ctrl+alt+x",
    "command": "emacs-mcx.exchangePointAndMark",
    "when": "editorTextFocus"
},
{
    "key": "ctrl+alt+a",
    "command": "cursorUndo",
    "when": "textInputFocus"
},
{
    "key": "ctrl+u",
    "command": "-cursorUndo",
    "when": "textInputFocus"
},
{
    "key": "ctrl+alt+e",
    "command": "cursorRedo"
},
{
    "key": "ctrl+d ctrl+d",
    "command": "editor.action.deleteLines",
    "when": "textInputFocus && !editorReadonly"
},
{
    "key": "ctrl+shift+k",
    "command": "-editor.action.deleteLines",
    "when": "textInputFocus && !editorReadonly"
},
{
    "key": "ctrl+p ctrl+p",
    "command": "editor.action.clipboardPasteAction"
},
{
    "key": "ctrl+v",
    "command": "-editor.action.clipboardPasteAction"
},
{
    "key": "ctrl+space ctrl+p",
    "command": "workbench.action.toggleActivityBarVisibility"
},
{
    "key": "ctrl+space ctrl+oem_comma",
    "command": "workbench.action.toggleSidebarVisibility"
},
{
    "key": "ctrl+b",
    "command": "-workbench.action.toggleSidebarVisibility"
},
{
    "key": "ctrl+space ctrl+s",
    "command": "workbench.action.toggleAuxiliaryBar"
},
{
    "key": "ctrl+alt+b",
    "command": "-workbench.action.toggleAuxiliaryBar"
},
{
    "key": "ctrl+o ctrl+e",
    "command": "workbench.view.explorer",
    "when": "viewContainer.workbench.view.explorer.enabled"
},
{
    "key": "ctrl+shift+e",
    "command": "-workbench.view.explorer",
    "when": "viewContainer.workbench.view.explorer.enabled"
},
{
    "key": "ctrl+o ctrl+f",
    "command": "workbench.action.findInFiles"
},
{
    "key": "ctrl+shift+f",
    "command": "-workbench.action.findInFiles"
},
{
    "key": "ctrl+o ctrl+d",
    "command": "workbench.view.debug",
    "when": "viewContainer.workbench.view.debug.enabled"
},
{
    "key": "ctrl+shift+d",
    "command": "-workbench.view.debug",
    "when": "viewContainer.workbench.view.debug.enabled"
},
{
    "key": "ctrl+o ctrl+x",
    "command": "workbench.view.extensions",
    "when": "viewContainer.workbench.view.extensions.enabled"
},
{
    "key": "ctrl+shift+x",
    "command": "-workbench.view.extensions",
    "when": "viewContainer.workbench.view.extensions.enabled"
},
{
    "key": "ctrl+o ctrl+r",
    "command": "workbench.view.remote"
},
{
    "key": "ctrl+o ctrl+t",
    "command": "workbench.view.extension.test"
},
{
    "key": "ctrl+o ctrl+g",
    "command": "workbench.view.extension.github-pull-requests"
},
{
    "key": "ctrl+o ctrl+s",
    "command": "workbench.view.extension.liveshare"
},
{
    "key": "ctrl+o ctrl+w",
    "command": "workbench.view.extension.PowerShell"
},
{
    "key": "ctrl+o ctrl+c",
    "command": "workbench.view.extension.cmake__viewContainer"
},
{
    "key": "ctrl+o ctrl+b",
    "command": "workbench.view.extension.bookmarks"
},
{
    "key": "ctrl+o ctrl+m",
    "command": "workbench.view.extension.project-manager"
},
{
    "key": "ctrl+o ctrl+n",
    "command": "workbench.view.extension.dockerView"
},
{
    "key": "ctrl+z ctrl+n",
    "command": "editor.action.addSelectionToNextFindMatch",
    "when": "editorFocus"
},
{
    "key": "ctrl+d",
    "command": "-editor.action.addSelectionToNextFindMatch",
    "when": "editorFocus"
},
{
    "key": "ctrl+z ctrl+p",
    "command": "editor.action.addSelectionToPreviousFindMatch"
},
{
    "key": "ctrl+z",
    "command": "undo"
},
{
    "key": "ctrl+o ctrl+space",
    "command": "emacs-mcx.rectangleMarkMode",
    "when": "editorTextFocus"
},
{
    "key": "ctrl+x space",
    "command": "-emacs-mcx.rectangleMarkMode",
    "when": "editorTextFocus"
},
{
    "key": "ctrl+m ctrl+m",
    "command": "emacs-mcx.setMarkCommand",
    "when": "editorTextFocus"
},
{
    "key": "ctrl+space",
    "command": "-emacs-mcx.setMarkCommand",
    "when": "editorTextFocus"
},
{
    "key": "ctrl+r ctrl+r",
    "command": "swiper.swiper-word-at-cursor"
},
{
    "key": "ctrl+p ctrl+m",
    "command": "markdown.showPreviewToSide",
    "when": "!notebookEditorFocused && editorLangId == 'markdown'"
},
{
    "key": "ctrl+k v",
    "command": "-markdown.showPreviewToSide",
    "when": "!notebookEditorFocused && editorLangId == 'markdown'"
},
{
    "key": "ctrl+p ctrl+r",
    "command": "markdown.preview.refresh"
},
{
    "key": "ctrl+c ctrl+d",
    "command": "editor.action.showDefinitionPreviewHover"
},
{
    "key": "ctrl+space ctrl+space",
    "command": "workbench.action.quickOpen"
},
{
    "key": "ctrl+p",
    "command": "-workbench.action.quickOpen"
},
{
    "key": "ctrl+t ctrl+t",
    "command": "editor.action.jumpToBracket",
    "when": "editorTextFocus"
},
{
    "key": "ctrl+shift+oem_5",
    "command": "-editor.action.jumpToBracket",
    "when": "editorTextFocus"
},
{
    "key": "ctrl+g ctrl+d",
    "command": "editor.action.revealDeclaration"
},
{
    "key": "ctrl+g ctrl+t",
    "command": "editor.action.revealDefinition",
    "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor"
},
{
    "key": "f12",
    "command": "-editor.action.revealDefinition",
    "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor"
},
{
    "key": "ctrl+g ctrl+n",
    "command": "editor.action.goToTypeDefinition"
},
{
    "key": "ctrl+alt+oem_comma ctrl+alt+e",
    "command": "workbench.action.navigateToLastNavigationLocation"
},
{
    "key": "ctrl+alt+oem_comma ctrl+alt+a",
    "command": "workbench.action.navigateToLastEditLocation"
},
{
    "key": "ctrl+k ctrl+q",
    "command": "-workbench.action.navigateToLastEditLocation"
},
{
    "key": "alt+c alt+c",
    "command": "editor.action.transformToCamelcase"
},
{
    "key": "ctrl+e",
    "command": "-workbench.action.quickOpen"
},
{
    "key": "end",
    "command": "-emacs-mcx.moveEndOfLine",
    "when": "editorTextFocus"
},
{
    "key": "ctrl+space ctrl+t",
    "command": "workbench.action.toggleMenuBar"
},
{
    "key": "ctrl+o ctrl+a",
    "command": "chatgpt-vscode.view.focus"
},
{
    "key": "ctrl+space ctrl+oem_period",
    "command": "workbench.action.files.openFile",
    "when": "true"
},
{
    "key": "ctrl+o",
    "command": "-workbench.action.files.openFile",
    "when": "true"
},
{
    "key": "ctrl+w ctrl+oem_period",
    "command": "workbench.action.files.showOpenedFileInNewWindow",
    "when": "emptyWorkspaceSupport"
},
{
    "key": "ctrl+k o",
    "command": "-workbench.action.files.showOpenedFileInNewWindow",
    "when": "emptyWorkspaceSupport"
},
{
    "key": "ctrl+alt+enter",
    "command": "emacs-mcx.newLine",
    "when": "editorTextFocus && emacs-mcx.prefixArgumentExists && !editorReadonly"
},
{
    "key": "enter",
    "command": "-emacs-mcx.newLine",
    "when": "editorTextFocus && emacs-mcx.prefixArgumentExists && !editorReadonly"
},
{
    "key": "ctrl+alt+enter",
    "command": "editor.action.insertLineAfter",
    "when": "editorTextFocus && !editorReadonly"
},
{
    "key": "ctrl+enter",
    "command": "-editor.action.insertLineAfter",
    "when": "editorTextFocus && !editorReadonly"
},
{
    "key": "ctrl+shift+d backspace",
    "command": "deleteAllRight"
},
{
    "key": "ctrl+d ctrl+backspace",
    "command": "deleteAllLeft"
},
{
    "key": "ctrl+shift+d ctrl+shift+backspace",
    "command": "deleteAllRight"
},
{
    "key": "ctrl+shift+o ctrl+shift+f",
    "command": "workbench.action.files.openFolder",
    "when": "openFolderWorkspaceSupport"
},
{
    "key": "ctrl+k ctrl+o",
    "command": "-workbench.action.files.openFolder",
    "when": "openFolderWorkspaceSupport"
},
{
    "key": "ctrl+alt+o ctrl+alt+e",
    "command": "workbench.files.action.focusOpenEditorsView",
    "when": "workbench.explorer.openEditorsView.active"
},
{
    "key": "ctrl+k e",
    "command": "-workbench.files.action.focusOpenEditorsView",
    "when": "workbench.explorer.openEditorsView.active"
},
{
    "key": "ctrl+b ctrl+b",
    "command": "editor.debug.action.toggleBreakpoint",
    "when": "debuggersAvailable && editorTextFocus"
},
{
    "key": "f9",
    "command": "-editor.debug.action.toggleBreakpoint",
    "when": "debuggersAvailable && editorTextFocus"
},
{
    "key": "ctrl+a",
    "command": "-editor.action.selectAll"
},
{
    "key": "ctrl+o ctrl+v",
    "command": "outline.focus"
},
{
    "key": "ctrl+shift+n",
    "command": "-workbench.action.newWindow"
},
{
    "key": "ctrl+shift+n",
    "command": "explorer.newFolder"
},
{
    "key": "ctrl+shift+alt+n",
    "command": "welcome.showNewFileEntries"
},
{
    "key": "ctrl+alt+meta+n",
    "command": "-welcome.showNewFileEntries"
},
{
    "key": "ctrl+shift+alt+n",
    "command": "explorer.newFile"
},
{
    "key": "shift+alt+s shift+alt+e",
    "command": "todo.views.2embedded.focus"
},
{
    "key": "shift+alt+s shift+alt+f",
    "command": "todo.views.1files.focus"
},
{
    "key": "shift+alt+s shift+alt+d",
    "command": "todo.toggleDone",
    "when": "editorTextFocus && editorLangId == 'todo'"
},
{
    "key": "alt+d",
    "command": "-todo.toggleDone",
    "when": "editorTextFocus && editorLangId == 'todo'"
},
{
    "key": "shift+alt+s shift+alt+c",
    "command": "todo.toggleCancelled",
    "when": "editorTextFocus && editorLangId == 'todo'"
},
{
    "key": "alt+c",
    "command": "-todo.toggleCancelled",
    "when": "editorTextFocus && editorLangId == 'todo'"
},
{
    "key": "shift+alt+s shift+alt+t",
    "command": "todo.toggleTimer"
},
{
    "key": "shift+alt+s shift+alt+s",
    "command": "todo.toggleStart",
    "when": "editorTextFocus && editorLangId == 'todo'"
},
{
    "key": "alt+s",
    "command": "-todo.toggleStart",
    "when": "editorTextFocus && editorLangId == 'todo'"
},
{
    "key": "shift+alt+s shift+alt+a",
    "command": "todo.archive",
    "when": "editorTextFocus && editorLangId == 'todo'"
},
{
    "key": "ctrl+shift+a",
    "command": "-todo.archive",
    "when": "editorTextFocus && editorLangId == 'todo'"
},
{
    "key": "shift+alt+s shift+alt+enter",
    "command": "todo.toggleBox",
    "when": "editorTextFocus && editorLangId == 'todo'"
},
{
    "key": "ctrl+enter",
    "command": "-todo.toggleBox",
    "when": "editorTextFocus && editorLangId == 'todo'"
},
{
    "key": "ctrl+alt+v",
    "command": "emacs-mcx.recenterTopBottom",
    "when": "editorTextFocus"
},
{
    "key": "ctrl+l",
    "command": "-emacs-mcx.recenterTopBottom",
    "when": "editorTextFocus"
},
{
    "key": "ctrl+alt+.",
    "command": "editor.action.quickFix",
    "when": "editorHasCodeActionsProvider && editorTextFocus && !editorReadonly"
},
{
    "key": "ctrl+.",
    "command": "-editor.action.quickFix",
    "when": "editorHasCodeActionsProvider && editorTextFocus && !editorReadonly"
},
{
    "key": "ctrl+alt+g ctrl+alt+.",
    "command": "workbench.view.scm",
    "when": "workbench.scm.active"
},
{
    "key": "ctrl+shift+g",
    "command": "-workbench.view.scm",
    "when": "workbench.scm.active"
},
{
    "key": "ctrl+space ctrl+r",
    "command": "workbench.action.openRecent"
},
{
    "key": "ctrl+r",
    "command": "-workbench.action.openRecent"
},
{
    "key": "ctrl+` ctrl+e",
    "command": "workbench.action.focusActiveEditorGroup"
},
{
    "key": "ctrl+` ctrl+o",
    "command": "workbench.action.output.toggleOutput",
    "when": "workbench.panel.output.active"
},
{
    "key": "ctrl+k ctrl+h",
    "command": "-workbench.action.output.toggleOutput",
    "when": "workbench.panel.output.active"
},
{
    "key": "ctrl+` ctrl+p",
    "command": "workbench.actions.view.problems",
    "when": "workbench.panel.markers.view.active"
},
{
    "key": "ctrl+shift+m",
    "command": "-workbench.actions.view.problems",
    "when": "workbench.panel.markers.view.active"
},
{
    "key": "ctrl+` ctrl+d",
    "command": "workbench.debug.action.toggleRepl",
    "when": "workbench.panel.repl.view.active"
},
{
    "key": "ctrl+shift+y",
    "command": "-workbench.debug.action.toggleRepl",
    "when": "workbench.panel.repl.view.active"
},
{
    "key": "ctrl+` ctrl+t",
    "command": "workbench.action.terminal.toggleTerminal",
    "when": "terminal.active"
},
{
    "key": "ctrl+`",
    "command": "-workbench.action.terminal.toggleTerminal",
    "when": "terminal.active"
},
{
    "key": "ctrl+` ctrl+c",
    "command": "workbench.action.focusCommentsPanel"
},
{
    "key": "ctrl+` ctrl+`",
    "command": "workbench.action.togglePanel"
},
{
    "key": "ctrl+j",
    "command": "-workbench.action.togglePanel"
},
{
    "key": "ctrl+shift+p ctrl+shift+p",
    "command": "editor.action.clipboardCutAction"
},
{
    "key": "ctrl+x",
    "command": "-editor.action.clipboardCutAction"
},
{
    "key": "ctrl+alt+p ctrl+alt+p",
    "command": "editor.action.clipboardCopyAction"
},
{
    "key": "ctrl+c",
    "command": "-editor.action.clipboardCopyAction"
},
{
    "key": "ctrl+alt+. ctrl+alt+.",
    "command": "git.stageSelectedRanges",
    "when": "isInDiffEditor && !operationInProgress"
},
{
    "key": "ctrl+k ctrl+alt+s",
    "command": "-git.stageSelectedRanges",
    "when": "isInDiffEditor && !operationInProgress"
},
{
    "key": "ctrl+alt+m ctrl+alt+t",
    "command": "workbench.action.toggleMaximizedPanel"
},
{
    "key": "ctrl+alt+m ctrl+alt+m",
    "command": "workbench.action.minimizeOtherEditors"
},
{
    "key": "ctrl+shift+w h",
    "command": "workbench.action.moveEditorToLeftGroup"
},
{
    "key": "ctrl+shift+w l",
    "command": "workbench.action.moveEditorToRightGroup"
}
]